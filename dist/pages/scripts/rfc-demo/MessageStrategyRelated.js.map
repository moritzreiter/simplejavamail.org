{"version":3,"sources":["pages/scripts/rfc-demo/MessageStrategyRelated.ts"],"names":[],"mappings":";;;;;;;;;;;;;AACA,OAAO,EAAC,eAAe,EAAC,MAAM,sBAAsB,CAAC;AAErD;IAA4C,0CAAe;IAA3D;;IAiBA,CAAC;IAhBC,oDAAmB,GAAnB,UAAoB,KAAY;QAChC,OAAO,CAAC,eAAe,CAAC,yBAAyB,CAAC,KAAK,CAAC;YACpD,eAAe,CAAC,2BAA2B,CAAC,KAAK,CAAC;YAClD,CAAC,eAAe,CAAC,+BAA+B,CAAC,KAAK,CAAC,CAAC;IAC7D,CAAC;IAEO,0DAAyB,GAAhC,UAAiC,KAAY;QAC3C,OAAO,MAAM;YACX,uCAAuC;YACvC,WAAW;YACX,0CAA0C;YAC1C,gEAAgE;YAChE,YAAY;YACZ,UAAU;YACV,OAAO,CAAC;IACZ,CAAC;IACH,6BAAC;AAAD,CAjBA,AAiBC,CAjB2C,eAAe,GAiB1D","file":"MessageStrategyRelated.js","sourcesContent":["import {Email} from \"./Email.js\";\nimport {MessageStrategy} from \"./MessageStrategy.js\";\n\nexport class MessageStrategyRelated extends MessageStrategy {\n  compatibleWithEmail(email: Email): boolean {\n\t\treturn !MessageStrategy.emailContainsMixedContent(email) &&\n      MessageStrategy.emailContainsRelatedContent(email) &&\n      !MessageStrategy.emailContainsAlternativeContent(email);\n\t}\n  \n  public determineMessageStructure(email: Email): string {\n    return \"<ul>\" +\n      \"  <li class=\\\"indent\\\">related (root)\" +\n      \"     <ul>\" +\n      \"     <li class=\\\"indent\\\">HTML text</li>\" +\n      \"     <li class=\\\"indent\\\">embeddable content (ie. images)</li>\" +\n      \"     </ul>\" +\n      \"   </li>\" +\n      \"</ul>\";\n  }\n}\n"]}